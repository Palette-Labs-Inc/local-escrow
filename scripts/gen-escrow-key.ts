#!/usr/bin/env tsx
// @ts-nocheck
/*
 * Generates a fresh secp256k1 private key for the delegated escrow signer
 * and writes it to `apps/vite-react/.env.local`.
 *
 * This file is meant for LOCAL DEVELOPMENT ONLY.
 * Never commit the resulting `.env.local` file.
 */

import { existsSync, writeFileSync } from 'node:fs'
import { join, dirname } from 'node:path'
import { fileURLToPath } from 'node:url'
import { P256, PublicKey } from 'ox'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

/**
 * Generates a fresh P-256 key pair. We serialise the *private* key as hex so we
 * can pop it into `.env.local` for local development. The corresponding
 * *public* key is derived for convenience & printed to the console.
 */
function generateKey() {
  const privateKey = P256.randomPrivateKey()
  const publicKey = PublicKey.toHex(P256.getPublicKey({ privateKey }))
  return { privateKey, publicKey }
}

function writeEnv(privateKey: `0x${string}`, envPath: string) {
  const banner = '# Auto-generated by scripts/gen-escrow-key.ts â€“ DO NOT COMMIT\n'
  const content = `${banner}VITE_ESCROW_SIGNER_PRIVATE_KEY=${privateKey}\n`
  writeFileSync(envPath, content, { encoding: 'utf8', flag: 'w' })
}

function main() {
  const { privateKey, publicKey } = generateKey()
  const envPath = join(__dirname, '../apps/react/.env.local')

  // Don't accidentally overwrite an existing key without notice.
  if (existsSync(envPath)) {
    console.error(`\u26A0\uFE0F  ${envPath} already exists. Remove it first if you really want to regenerate the key.`)
    process.exit(1)
  }

  writeEnv(privateKey, envPath)

  console.log('\nEscrow signer (P-256) generated successfully!')
  console.log('  Public key   :', publicKey)
  console.log('  Private key  :', privateKey)
  console.log('\nThe key has been written to:', envPath)
  console.log('Remember: this file is in .gitignore and should never be committed.')
}

main() 